package com.bluedon.kafka

import java.io.InputStream
import java.util.Properties

import com.bluedon.dataMatch.DataProcess
import org.apache.spark.SparkContext
import org.apache.spark.sql.SparkSession
import org.apache.spark.streaming.{Seconds, StreamingContext}

/**
  * Author: Dlin
  * Date:2017/8/18 9:43
  * Descripe: 流量入库
  */
case class Flow(appproto:String,date:Long,srcmac:String,srcip:String,srcport:String,dstmac:String,dstip:String,dstport:String,domain:String,ip:String,recordid:String)
object FlowServer {
  def main(args: Array[String]): Unit = {
    try{
      val properties:Properties = new Properties();
      val ipstream:InputStream=this.getClass().getResourceAsStream("/manage.properties");
      properties.load(ipstream);
      val maxRatePerPartition:Int=properties.getProperty("flow.maxRatePerPartition").toInt
      //是否开启最优 true
      val backpressure:String = properties.getProperty("flow.backpressure")
      //消费窗口最大
      val times:Int =properties.getProperty("flow.time").toInt
      val masterUrl = properties.getProperty("spark.master.url")
      val spark = SparkSession
        .builder()
        .master(masterUrl)
        //.master("local")
        .appName("AnalyzeServer_flow")
        .config("spark.some.config.option", "some-value")
        .config("spark.streaming.unpersist",true)  // 智能地去持久化
        .config("spark.streaming.stopGracefullyOnShutdown","true")  // 优雅的停止服务
        .config("spark.streaming.backpressure.enabled",backpressure)      //开启后spark自动根据系统负载选择最优消费速率
        .config("spark.streaming.backpressure.initialRate",20000)      //限制第一次批处理应该消费的数据，因为程序冷启动队列里面有大量积压，防止第一次全部读取，造成系统阻塞
        .config("spark.streaming.kafka.maxRatePerPartition",maxRatePerPartition)      //限制每秒每个消费线程读取每个kafka分区最大的数据量
        .config("spark.streaming.receiver.maxRate",20000)      //设置每次接收的最大数量
        .config("spark.serializer", "org.apache.spark.serializer.KryoSerializer")   //使用Kryo序列化
      /*  .config("es.index.auto.create", "true")
        .config("es.nodes",esnodes)
        .config("es.port",esport)*/
        .getOrCreate()
      val sparkConf:SparkContext = spark.sparkContext
      //上网行为处理
      //val ssc_flow = new StreamingContext(sparkConf, Seconds(1))
      val ssc_flow = new StreamingContext(sparkConf, Seconds(times))
      val dataProcess = new DataProcess
      //java入es
      dataProcess.flowProcess(spark,ssc_flow,properties)
      //spark入es
      //dataProcess.flowProcessback(spark,ssc_flow,properties)
      ssc_flow.start()
      ssc_flow.awaitTermination()
    }catch {
      case e:Exception=>{
        e.printStackTrace()
      }
    }
  }
}
